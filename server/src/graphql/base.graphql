scalar JSON
scalar JSONObject

interface Node {
  id: ID!
}

type BooleanValue {
  value: Boolean!
}

type StringValue {
  value: String!
}

type IntValue {
  value: String!
}

type FloatValue {
  value: String!
}

interface FieldEntry {
  key: String!
}

type JSONFieldEntry implements FieldEntry {
  key: String!
  value: JSON
}

type VertexFieldEntry implements FieldEntry {
  key: String!
  value: ID!
}

type VertexListFieldEntry implements FieldEntry {
  key: String!
  value: [ID!]!
}

type Vertex implements Node {
  id: ID!
  typename: String!
  fields: [FieldEntry!]!
}

type Reference {
  fieldname: String!
  path: String!
  typename: String!
  description: String!
  affinity: Float
  count: Int!
}

type Type {
  typename: String!
  count: Int!
  references: [Reference!]!
}

type Query {
  meta: [Type]
  graph: JSON
  root(typename: String!): JSON
  node(id: ID!): Node
  relationship(parentId: String!, typename: String!, fieldname: String!): JSON
}

input CreateInput {
  typename: String!
  preset: JSON
}

type Mutation {
  create(typename: String!, preset: JSON): JSON
  createMany(inputs: [CreateInput!]!): JSON
}